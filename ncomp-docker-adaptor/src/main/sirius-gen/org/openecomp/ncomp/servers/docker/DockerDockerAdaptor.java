
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.ncomp.servers.docker;

import java.io.InputStream;
import org.openecomp.ncomp.sirius.manager.IRequestHandler;
import org.openecomp.ncomp.sirius.manager.ISiriusPlugin;
import org.openecomp.ncomp.sirius.manager.ISiriusServer;
import org.openecomp.ncomp.sirius.function.FunctionUtils;
import org.openecomp.ncomp.component.ApiRequestStatus;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.EList;
import org.json.JSONObject;
import java.util.Date;



import org.openecomp.ncomp.docker.impl.DockerAdaptorImpl;



public class DockerDockerAdaptor extends DockerAdaptorImpl {
	public static final Logger logger = Logger.getLogger(DockerDockerAdaptor.class);
	DockerDockerAdaptorProvider controller;
	ISiriusServer server;

	public DockerDockerAdaptor(ISiriusServer server) {
		this.server = server;
		this.controller = new DockerDockerAdaptorProvider(server,this);
	}






	public static void ecoreSetup() {
		DockerDockerAdaptorProvider.ecoreSetup();
	}
	public DockerDockerAdaptorProvider getSomfProvider() {
		return controller;
	}
}
